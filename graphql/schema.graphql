# import Subject, SubjectCreateInput, ReplyOnSubjectInput, SubjectConnection, SubjectFilter from './Subject/Subject.graphql'
# import Dispute, ReplyOnDisputInput, DisputeConnection from './Dispute/Dispute.graphql'
# import User from './User/User.graphql'
# import NotificationConnection from './Notification/Notification.graphql'
# import @auth from './schemaDirectives/auth.graphql'

scalar DateTime

type Query {
  allSubjects(
    first: Int = 10
    after: String
    last: Int = 10
    before: String
    filter: SubjectFilter
  ): SubjectConnection!
  allDisputes(
    first: Int = 10
    after: String
    last: Int = 10
    before: String
  ): DisputeConnection!
  subject(id: ID!): Subject
  me: User
  dispute(id: ID!): Dispute
  user(id: ID!): User
  allNotifications(
    first: Int = 10
    after: String
    last: Int = 10
    before: String
  ): NotificationConnection
}

type Mutation {
  createSubject(input: SubjectCreateInput!): Subject! @auth
  replyOnSubject(input: ReplyOnSubjectInput!): Dispute! @auth
  replyOnDispute(input: ReplyOnDisputInput!): Dispute! @auth
  markNotificationAsRead(id: ID!): Notification! @auth
  markMultipleNotificationAsRead(latestId: ID!): [Notification!]! @auth
}
