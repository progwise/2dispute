# import Subject, SubjectCreateInput, ReplyOnSubjectInput, SubjectConnection, SubjectFilter from './Subject/Subject.graphql'
# import Dispute, ReplyOnDisputInput, DisputeConnection from './Dispute/Dispute.graphql'
# import User from './User/User.graphql'
# import Message, UserVoting from './Message/Message.graphql'
# import Tweet from './Tweet/Tweet.graphql'
# import ChatItem, ChatScope, ChatConnection from './Chat/Chat.graphql'
# import @auth from './schemaDirectives/auth.graphql'
# import @complexity from './schemaDirectives/complexity.graphql'

scalar DateTime

type Query {
  allSubjects(
    limit: Int = 10
    after: String
    before: String
    filter: SubjectFilter
  ): SubjectConnection! @complexity(value: 1, multipliers: ["limit"])
  allDisputes(
    limit: Int = 10
    after: String
    before: String
  ): DisputeConnection! @complexity(value: 1, multipliers: ["limit"])
  subject(id: ID!): Subject
  me: User
  dispute(id: ID!): Dispute
  user(id: ID!): User
  twitterTimeline(after: String): TweetConnection
  chat(
    limit: Int = 10
    after: DateTime
    before: DateTime
    search: String
    scope: ChatScope! = USER_SCOPE
  ): ChatConnection @complexity(value: 1, multipliers: ["limit"])
  chatItem(id: ID!): ChatItem
}

type Mutation {
  createSubject(input: SubjectCreateInput!): Subject! @auth
  replyOnSubject(input: ReplyOnSubjectInput!): Dispute! @auth
  replyOnDispute(input: ReplyOnDisputInput!): Dispute! @auth
  vote(messageId: ID!, voting: UserVoting!): Message! @auth
}
